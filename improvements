Job based creep scheduler
    - priority queues (could be multiple queues in memory or a big dict)
    - creeps have set roles, and dont switch, they are just assigned jobs
Code Flow:
main: invokes other processes
    CreepFactory: checks if more creeps are required:
        create creeps if necessary
    JobController: scans for jobless creeps:
        scheduler assigns jobs to relevant creep based on priority
    CreepController: signals creeps to do work:
        creeps perform their jobs, performing actions inline with tick
        execution
    MemoryController: provides uniform access to all memory.

Memory structure
Memory:
    rooms: [list]
        sources: [list]
            id: dont expire - added when spawn built, and scout job
                miner: if set HARVEST jobs arent assigned for this source
                container: container that sits adjacent to this source
        spawns: [list]
            id: expired by creeps only when unfindable - added when built
        storage: [list]
            id: expired by creeps only when unfindable - added when built
        controller:
            id: doesnt expire
            container: container adjacent to controller
        last_job_scan: Game.time of last scan
    creeps: [list]
        name: {role}{number} reuse names, add only as necessary
            role: permanent
            job: added by scheduler - expired when complete
                name:
                source:
                destination:
                interruptable:
                stage: set by job
    jobs: list
        name: REPAIR|BUILD|CARRY|MINE|HARVEST|UPGRADE
        source:
        destination:
        interruptable:
    config:
        job_controller:
            scan_interval: ticks between scans

Creep Types
    - 3 Miner (nWORK 1CARRY 1MOVE) sits at resource, mines, empties into
        - container, scale up parts until source depletes before
            regeration, if cant scale, generate at most 2
    - 3 Upgrader (nWORK 1CARRY 1MOVE) sits at room controller, fills from
        contaier, and transfers energy to controller.
        - scale up parts until extentions insufficient to keep container
            filling, if cant scale high enough, generate at most 8
    - 1 Repairer (1WORK 1CARRY 2MOVE-static ratio) fills from container,
        repairs structures - mostly redundant after tower
        - should only need 1 per room, only generate as needed
    - 3 Carrier (4CARRY 4MOVE-static ratio) transfers energy from mining
        container to other containers and extentions
        - scale up until miner containers no longer fill
    - 1 Builder/Harvester (1WORK 1CARRY 2MOVE-static ratio) builds
        structures, harvests energy in early game
        - harvesters, generate at most (free mining spots * 1.5)
        - builders, generate 1 per construction site, at most 4

Structure layout
    - Containers (1 per source, 1 on controller)
        high priority - possible automated placing
    - Extentions (diagonally alternating, spread around spawner)
        highest priority - possible automated placing
    - Roads (1 lane wide connecting all containers bach to spawner
        lowest priority route calculated at construction time

